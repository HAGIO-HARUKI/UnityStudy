using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
public class playercontroller : MonoBehaviour
{
    private Rigidbody2D rb;    //用来获取角色的刚体信息
    public float speed;       //定义移动速度
    public float jumpforce;   //定义跳跃的力
    private Animator anim;     //获取动画的值
    public LayerMask Ground;  //场景层
    public Collider2D coll;   //碰撞体
    public int cherry =0;      //积分
    public int gem;             //未完工的积分
    public Text cherrynumber;   //为UI设置积分显示
    private bool ishurt;        //设置受伤状态
    private bool pressjump;
    public int jumpcount = 0;
    // Start is called before the first frame update start会在开始的第一帧刷新一次
    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        anim = GetComponent<Animator>();
    }

    private void Update() // Update is called once per frame update会逐帧刷新，在优先级更高的地方检测按下
    {
        if (Input.GetButtonDown("Jump") && jumpcount>0) //逐帧判断是否按下，放进fix里执行
        {
            pressjump = true;
        }
    }
    
    void FixedUpdate() //一秒50次，更低的时候执行，保证按下跳跃有效
    {
        if (!ishurt) //当受伤触发时，不加载移动函数
        {
            Movement();   //加载移动函数
        }
        SwitchAnim();
    }

    void Movement()
    {
        float horizontalmove = Input.GetAxis("Horizontal");   //获得移动事件。horizontal定义了左右和ad控制移动，左传递-1，右传递1
        float facedirection = Input.GetAxisRaw("Horizontal");   //getaxisraw用来获取整数而不是小数，facedirection根据数值确定目前的角色面向
        if (coll.IsTouchingLayers(Ground))  //在地板时获得1个跳跃点
        {
            jumpcount = 1;
        }
        if (pressjump && coll.IsTouchingLayers(Ground))   //是否按下按键跳跃并且在地板上
        {
            rb.velocity = new Vector2(rb.velocity.x, jumpforce * Time.deltaTime);   //当空格按下时，根据jumpforce来改变y轴的力，上升时正，下降时负实现跳跃
            anim.SetBool("jumping", true);
            pressjump = false;
        }
        else if(pressjump && jumpcount>0) //空中时按下会消耗跳跃点进行二段跳
        {
            rb.velocity = new Vector2(rb.velocity.x, jumpforce * Time.deltaTime);   //当空格按下时，根据jumpforce来改变y轴的力，上升时正，下降时负实现跳跃
            anim.SetBool("jumping", true);
            jumpcount--;
            pressjump = false;
        }

        if (horizontalmove != 0)
        {
            rb.velocity = new Vector2(horizontalmove * speed * Time.deltaTime, rb.velocity.y);    //当角色触发移动事件，来根据移动事件的值改变角色x轴实现移动
            anim.SetFloat("running", Mathf.Abs(facedirection));     //触发移动事件后根据当前移动速度确定是否改变移动动画
        }

        if (facedirection != 0)
        {
            transform.localScale = new Vector3(facedirection, 1, 1);    //当面向改变时改变角色的scale属性，-1获取镜像朝左
        }
    }
    //切换动画
    void SwitchAnim()
    {
        anim.SetBool("idle", false);
        if(rb.velocity.y < 0.1f && !coll.IsTouchingLayers(Ground))
        {
            anim.SetBool("falling", true);
        }

        if(anim.GetBool("jumping"))     //如果处于jumping动画阶段，当y轴力为负数时改为下降阶段
        {
            if(rb.velocity.y < 0) //刚体y轴力小于0 ，说明处于下降
            {
                anim.SetBool("jumping", false);
                anim.SetBool("falling", true);
            }
            else
                anim.SetBool("falling", false);
        }
        else if (ishurt)  //受伤状态
        {
            anim.SetBool("hurt", true);  
            anim.SetFloat("running", 0);
            if(Mathf.Abs(rb.velocity.x)<0.1f) //绝对值函数判断刚体x轴力，0时说明受伤移动结束
            {
                ishurt = false;
                anim.SetBool("hurt", false);
            }
        }
        else if(coll.IsTouchingLayers(Ground))      //如果collider触碰到Ground，改变为站立动画
        {
            anim.SetBool("falling", false);
            anim.SetBool("idle", true);
        }
        /*根据判断是否处于下降状态来改变触地动画
        if (anim.GetBool("falling")) 
        {
            if (rb.velocity.y == 0)
                anim.SetBool("falling", false);
        }
        */
    }

    private void OnTriggerEnter2D(Collider2D collision)  //利用这个函数触发碰撞
    {
        if(collision.tag == "Collection")  //当碰撞到标签为collection的东西时
        {
            Destroy(collision.gameObject);  //摧毁碰到的东西
            cherry += 1;
            cherrynumber.text = cherry.ToString();
        }
    }

    //消灭
    private void OnCollisionEnter2D(Collision2D collision)
    {
        if(collision.gameObject.tag == "Enemy")//触碰collision标签为敌人
        {
            if(anim.GetBool("falling"))//角色下落时
            {
                Destroy(collision.gameObject);//摧毁敌人
                rb.velocity = new Vector2(rb.velocity.x, jumpforce * Time.deltaTime);//获得弹跳力
                anim.SetBool("jumping", true);
                anim.SetBool("falling", false);
                anim.SetBool("idle", false);
            }
            else if (transform.position.x < collision.gameObject.transform.position.x) //非下落时根据x轴为止给予左右的力
            {
                ishurt = true;
                rb.velocity = new Vector2(-12, rb.velocity.y);
            }
            else if (transform.position.x > collision.gameObject.transform.position.x)
            {
                ishurt = true;
                rb.velocity = new Vector2(12, rb.velocity.y);
            }
            
        }
        
    }
}
